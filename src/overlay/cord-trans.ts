/**
 * Generated by GPT-5, please double check if you are using this code.
 *
 * 尊重显示器坐标系
 * 最终坐标系的 (0, 0) 与显示器坐标系的 (0, 0) 位于同一位置
 */

import { Screenshot } from "./clip-state";

// 屏幕信息（逻辑像素维度；scale 可选）
export type Display = {
  id: number; // 屏幕/显示器 id
  name?: string; // 屏幕名称（可选）
  x: number; // 该屏在桌面空间中的左上角 X（逻辑像素）
  y: number; // 该屏在桌面空间中的左上角 Y（逻辑像素）
  width: number; // 屏幕宽（逻辑像素）
  height: number; // 屏幕高（逻辑像素）
  scale?: number; // 可选：缩放系数（物理像素 = 逻辑像素 * scale）
};

// 覆盖窗体相对其所属屏幕原点的偏移（通常 0,0；如果你有边框或外层容器偏移可填）
export type OverlayWindow = {
  displayId: number; // 窗口覆盖的是哪块屏
  offsetX?: number; // 窗口左上角相对屏幕左上角的 X 偏移（逻辑像素）
  offsetY?: number; // 窗口左上角相对屏幕左上角的 Y 偏移（逻辑像素）
};

export type Point = { x: number; y: number };

export type CoordMode = "logical" | "physical";
export type ConvertOptions = { mode?: CoordMode };

/**
 * 计算"合并桌面"的起点与尺寸（把所有屏幕包起来的外接矩形）
 * 保持原始显示器坐标系，不做归一化处理
 */
function getDesktopBounds(displays: Display[]) {
  if (displays.length === 1) {
    return {
      originX: displays[0].x,
      originY: displays[0].y,
      width: displays[0].width,
      height: displays[0].height,
    };
  }

  const minX = Math.min(...displays.map((d) => d.x));
  const minY = Math.min(...displays.map((d) => d.y));
  const maxR = Math.max(...displays.map((d) => d.x + d.width));
  const maxB = Math.max(...displays.map((d) => d.y + d.height));
  return {
    originX: minX,
    originY: minY,
    width: maxR - minX,
    height: maxB - minY,
  };
}

/**
 * client(窗口内) -> global(保持原始显示器坐标系)
 * @param client  窗口内坐标（通常来自鼠标/拖拽的 clientX/Y）
 * @param win     该坐标来自哪个覆盖窗体
 * @param displays 所有屏幕信息
 * @param opts    mode='logical'|'physical'（默认 logical）
 * @returns       全局桌面坐标（保持原始显示器坐标系）
 */
function clientToGlobal(
  client: Point,
  win: OverlayWindow,
  displays: Display[],
  opts: ConvertOptions = {}
): Point {
  const { mode = "logical" } = opts;
  const d =
    displays.length === 1
      ? displays[0]
      : displays.find((s) => s.id === win.displayId);
  if (!d) throw new Error(`Display ${win.displayId} not found`);

  const scale = d.scale ?? 1;
  // 先把 client 点转成逻辑像素（如果你传来的是物理像素且想转逻辑，就除以 scale）
  const clientLogical: Point =
    mode === "physical" ? { x: client.x / scale, y: client.y / scale } : client;

  // 叠加 窗口相对屏幕 的偏移，再叠加 屏幕在桌面空间 的位置
  const winOffX = win.offsetX ?? 0;
  const winOffY = win.offsetY ?? 0;
  const globalLogical = {
    x: d.x + winOffX + clientLogical.x,
    y: d.y + winOffY + clientLogical.y,
  };

  // 如果最终你要"物理像素"的 global，就乘回 scale
  return mode === "physical"
    ? { x: globalLogical.x * scale, y: globalLogical.y * scale }
    : globalLogical;
}

/**
 * global(保持原始显示器坐标系) -> client(窗口内)
 * 需要知道这个 global 点属于哪个窗体/屏幕（通常你已知用户当前在操作哪个覆盖窗体）
 * @param global  全局桌面坐标（保持原始显示器坐标系）
 * @param win     目标覆盖窗体
 * @param displays 所有屏幕信息
 * @param opts    mode='logical'|'physical'
 * @returns       窗口内坐标
 */
function globalToClient(
  global: Point,
  win: OverlayWindow,
  displays: Display[],
  opts: ConvertOptions = {}
): Point {
  const { mode = "logical" } = opts;
  const d =
    displays.length === 1
      ? displays[0]
      : displays.find((s) => s.id === win.displayId);
  if (!d) throw new Error(`Display ${win.displayId} not found`);

  const scale = d.scale ?? 1;
  // 如果 global 传入的是物理像素且想换成逻辑，先除以 scale
  const globalLogical: Point =
    mode === "physical" ? { x: global.x / scale, y: global.y / scale } : global;

  const winOffX = win.offsetX ?? 0;
  const winOffY = win.offsetY ?? 0;
  const clientLogical = {
    x: globalLogical.x - d.x - winOffX,
    y: globalLogical.y - d.y - winOffY,
  };

  return mode === "physical"
    ? { x: clientLogical.x * scale, y: clientLogical.y * scale }
    : clientLogical;
}

/** 工具：根据 global 点找它落在哪个屏（逻辑像素空间，使用原始显示器坐标系） */
function hitTestDisplay(
  global: Point,
  displays: Display[]
): Display | undefined {
  if (displays.length === 1) return displays[0];

  return displays.find(
    (d) =>
      global.x >= d.x &&
      global.x <= d.x + d.width &&
      global.y >= d.y &&
      global.y <= d.y + d.height
  );
}

/**
 * global(保持原始显示器坐标系) -> normalized global(归一化坐标系，左上角为0,0)
 * @param global  全局桌面坐标（保持原始显示器坐标系）
 * @param displays 所有屏幕信息
 * @param opts    mode='logical'|'physical'
 * @returns       归一化的全局坐标（左上角为0,0）
 */
function globalToNormalized(
  global: Point,
  displays: Display[],
  opts: ConvertOptions = {}
): Point {
  const { mode = "logical" } = opts;
  const bounds = getDesktopBounds(displays);

  // 如果是物理像素模式，需要考虑缩放
  if (mode === "physical") {
    // 对于物理像素，我们需要找到对应的显示器来获取缩放比例
    const display = hitTestDisplay(global, displays);
    const scale = display?.scale ?? 1;

    // 先转换为逻辑像素进行计算
    const globalLogical = { x: global.x / scale, y: global.y / scale };
    const normalizedLogical = {
      x: globalLogical.x - bounds.originX,
      y: globalLogical.y - bounds.originY,
    };

    // 再转换回物理像素
    return {
      x: normalizedLogical.x * scale,
      y: normalizedLogical.y * scale,
    };
  }

  // 逻辑像素模式：直接减去桌面边界的原点偏移
  return {
    x: global.x - bounds.originX,
    y: global.y - bounds.originY,
  };
}

/**
 * normalized global(归一化坐标系，左上角为0,0) -> global(保持原始显示器坐标系)
 * @param normalized  归一化的全局坐标（左上角为0,0）
 * @param displays 所有屏幕信息
 * @param opts    mode='logical'|'physical'
 * @returns       全局桌面坐标（保持原始显示器坐标系）
 */
function normalizedToGlobal(
  normalized: Point,
  displays: Display[],
  opts: ConvertOptions = {}
): Point {
  const { mode = "logical" } = opts;
  const bounds = getDesktopBounds(displays);

  // 如果是物理像素模式，需要考虑缩放
  if (mode === "physical") {
    // 先转换为逻辑像素进行计算
    const normalizedLogical = normalized; // 假设输入已经是逻辑像素
    const globalLogical = {
      x: normalizedLogical.x + bounds.originX,
      y: normalizedLogical.y + bounds.originY,
    };

    // 找到对应的显示器来获取缩放比例
    const display = hitTestDisplay(globalLogical, displays);
    const scale = display?.scale ?? 1;

    // 转换为物理像素
    return {
      x: globalLogical.x * scale,
      y: globalLogical.y * scale,
    };
  }

  // 逻辑像素模式：直接加上桌面边界的原点偏移
  return {
    x: normalized.x + bounds.originX,
    y: normalized.y + bounds.originY,
  };
}

function screenshotToDisplay(screenshot: Screenshot): Display {
  return {
    id: screenshot.id,
    name: screenshot.name,
    x: screenshot.x,
    y: screenshot.y,
    width: screenshot.width,
    height: screenshot.height,
  };
}

function isGlobalPointInDisplay(global: Point, display: Display): boolean {
  return (
    global.x >= display.x &&
    global.x <= display.x + display.width &&
    global.y >= display.y &&
    global.y <= display.y + display.height
  );
}

const coordTrans = {
  getDesktopBounds,
  clientToGlobal,
  globalToClient,
  hitTestDisplay,
  globalToNormalized,
  normalizedToGlobal,
  screenshotToDisplay,
  isGlobalPointInDisplay,
};
export default coordTrans;
